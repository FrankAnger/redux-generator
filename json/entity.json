{
  "actions": "import * as types from \"./types\";\nimport * as model from \"./model\";\nimport { inferLiteral } from \"./model\";\n<%  for (let item of worker.array){ %>\nexport const <%-item.actionName-%> = (payload: model.<%-item.actionPayload-%>) => ({\n\ttype: inferLiteral(types.<%-item.type-%>),\n\tpayload\n} as const);\n<% } %>\n",
  "saga": "import { call, takeEvery, put } from \"redux-saga/effects\";\n\nimport * as types from \"../../<%-reduxStoreFolderName-%>/<%-singleEntityLowerCase-%>/types\";\nimport * as actions from \"../../<%-reduxStoreFolderName-%>/<%-singleEntityLowerCase-%>/actions\";\n\nimport {\n<% Object.keys(worker.models).forEach(elem => { -%>\n<%-worker.models[elem].sagaType-%>,\n<% }); -%>\n} from \"../../<%-reduxStoreFolderName-%>/<%-singleEntityLowerCase-%>/model\";\n<% Object.keys(worker.models).forEach(elem => { %>\nfunction* <%-worker.models[elem].sagaFuncName-%>({ payload }: <%-worker.models[elem].sagaType-%>) {\n\ttry {\n\t\tconst response = yield call(() => {});\n\n\t\tyield put(actions.<%-worker.models[elem].successActionName-%>(response));\n\t} catch (error) {\n\t\tyield put(actions.<%-worker.models[elem].failActionName-%>(error));\n\t}\n}\n<% }); %>\nfunction* <%-singleEntityLowerCase-%>() {\n<% Object.keys(worker.models).forEach(elem => { -%>\n\tyield takeEvery(types.<%-worker.models[elem].requestType-%>, <%-worker.models[elem].sagaFuncName-%>);\n<% }); -%>\n}\n\nexport default <%-singleEntityLowerCase-%>;\n",
  "model": "import { Action } from \"redux\";\nimport * as actions from \"./actions\";\n\n// general for redux\ntype inferValueType<T> = T extends { [key: string]: infer U } ? U : never;\nconst iL = <U, T extends U>(arg: T): T => arg;\nexport const inferLiteral = <T extends string>(arg: T): T => iL(arg);\nexport type <%-entity-%>ActionTypes = ReturnType<inferValueType<typeof actions>>;\n<% Object.keys(worker.models).forEach(elem => { %>\nexport type <%-worker.models[elem].request-%> = {};\nexport type <%-worker.models[elem].success-%> = {};\nexport type <%-worker.models[elem].fail-%> = {};\nexport type <%-worker.models[elem].actionType-%> = (payload: <%-worker.models[elem].request-%>) => <%-entity-%>ActionTypes;\n\nexport interface <%-worker.models[elem].sagaType-%> extends Action {\n\tpayload: <%-worker.models[elem].request-%> ;\n}\n<% }); %>\n// main type\nexport type <%-singleEntityUpperCase-%>S = {};\n",
  "reducer": "import * as types from \"./types\";\n\nimport { <%-entity-%>ActionTypes, <%-singleEntityUpperCase-%>S } from \"./model\";\n\nconst initialState: <%-singleEntityUpperCase-%>S = {};\n\nexport const <%-singleEntityLowerCase-%>Reducer = (state = initialState, action: <%-entity-%>ActionTypes): <%-singleEntityUpperCase-%>S => {\n\tswitch (action.type) {\n<%  for (let item of worker.typesOnly){ -%>\n\t\tcase types.<%-item-%>: {\n\t\t\treturn { ...state };\n\t\t}\n<% } %>\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n",
  "types": "<%  for (let item of worker.array){ -%>\nexport const <%-item.type-%> = \"<%-item.typePrefix-%>/<%-item.type-%>\";\n<% } %>"
}
