{
  "saga_index": "import { fork } from \"redux-saga/effects\";\n\nimport auth from \"./authenticate\";\n\nexport default function*() {\n\tyield fork(auth);\n}\n",
  "saga_auth_index": "import { call, takeEvery, put } from \"redux-saga/effects\";\n\nimport * as types from \"../../<%-reduxStoreFolderName-%>/authenticate/types\";\nimport * as actions from \"../../<%-reduxStoreFolderName-%>/authenticate/actions\";\n\nimport { SignInSagas, SignUpSagas, LogOutSagas, RestorePasswordSagas } from \"../../<%-reduxStoreFolderName-%>/authenticate/model\";\n\nfunction* signIn({ payload }: SignInSagas) {\n\ttry {\n\t\tconst response = yield call(() => {});\n\n\t\tyield put(actions.signInSuccess(response));\n\t} catch (error) {\n\t\tyield put(actions.signInFail(error));\n\t}\n}\n\nfunction* signUp({ payload }: SignUpSagas) {\n\ttry {\n\t\tconst response = yield call(() => {});\n\n\t\tyield put(actions.signUpSuccess(response));\n\t} catch (error) {\n\t\tyield put(actions.signUpFail(error));\n\t}\n}\n\nfunction* logOut({ payload }: LogOutSagas) {\n\ttry {\n\t\tconst response = yield call(() => {});\n\n\t\tyield put(actions.logOutSuccess(response));\n\t} catch (error) {\n\t\tyield put(actions.logOutFail(error));\n\t}\n}\n\nfunction* responsePassword({ payload }: RestorePasswordSagas) {\n\ttry {\n\t\tconst response = yield call(() => {});\n\n\t\tyield put(actions.restorePasswordSuccess(response));\n\t} catch (error) {\n\t\tyield put(actions.restorePasswordFail(error));\n\t}\n}\n\nfunction* auth() {\n\tyield takeEvery(types.SIGN_IN, signIn);\n\tyield takeEvery(types.SIGN_UP, signUp);\n\tyield takeEvery(types.LOG_OUT, logOut);\n\tyield takeEvery(types.RESTORE_PASSWORD, responsePassword);\n}\n\nexport default auth;\n",
  "store_model": "import { AUTH } from \"./authenticate/model\";\n\nexport type STORE = {\n\tauth: AUTH;\n};\n",
  "store_initial_store": "export const initialStore = {\n\tauth: {}\n};\n",
  "store_index": "import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger } from \"redux-logger\";\n<%- saga ? 'import createSagaMiddleware from \"redux-saga\";' : null %>\n\nimport { initialStore } from \"./initial-store\";\nimport { rootReducer } from \"./global-reducer\";\n<% if(saga) { -%>\nimport rootSaga from \"../<%-sagaFolderName-%>\";\n<% } -%> \n\ndeclare global {\n\tinterface Window {\n\t\t__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n\t}\n}\n\nconst composeEnhancers =\n\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && process.env.NODE_ENV !== \"production\"\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t: compose;\n\n<%- saga ? \"const sagaMiddleware = createSagaMiddleware();\" : null %>\n\n<%- saga ? \"let middleWares: any = [sagaMiddleware];\" : \"let middleWares: any = [];\" %>\n\nif (process.env.NODE_ENV === \"development\") {\n\tconst logger = createLogger({\n\t\tcollapsed: true,\n\t});\n\tmiddleWares = [...middleWares, logger];\n}\n\nexport default createStore(rootReducer, initialStore, composeEnhancers(applyMiddleware(...middleWares)));\n\n<%- saga ? \"sagaMiddleware.run(rootSaga);\" : null %>",
  "store_global_reducer": "import { combineReducers, Reducer } from \"redux\";\n\nimport { STORE } from \"./model\";\nimport { AuthActionTypes } from \"./authenticate/model\";\n\n// reducers\nimport { authReducer } from \"./authenticate/reducer\";\n\nconst appReducer = combineReducers({\n\tauth: authReducer\n});\n\ntype AppActions = AuthActionTypes;\n\nexport const rootReducer: Reducer<STORE, AppActions> = (state, action): STORE => {\n\t// if (action.type === GLOBAL_STORE_RESET) {\n\t// \t// way to set global action\n\t// \treturn initialStore;\n\t// }\n\n\treturn appReducer(state, action);\n};\n",
  "store_auth_types": "export const SIGN_IN = \"authenticate/SIGN_IN\";\nexport const SIGN_IN_SUCCESS = \"authenticate/SIGN_IN_SUCCESS\";\nexport const SIGN_IN_FAIL = \"authenticate/SIGN_IN_FAIL\";\n\nexport const SIGN_UP = \"authenticate/SIGN_UP\";\nexport const SIGN_UP_SUCCESS = \"authenticate/SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAIL = \"authenticate/SIGN_UP_FAIL\";\n\nexport const LOG_OUT = \"authenticate/LOG_OUT\";\nexport const LOG_OUT_SUCCESS = \"authenticate/LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAIL = \"authenticate/LOG_OUT_FAIL\";\n\nexport const RESTORE_PASSWORD = \"authenticate/RESTORE_PASSWORD\";\nexport const RESTORE_PASSWORD_SUCCESS = \"authenticate/RESTORE_PASSWORD_SUCCESS\";\nexport const RESTORE_PASSWORD_FAIL = \"authenticate/RESTORE_PASSWORD_FAIL\";\n",
  "store_auth_reducer": "import * as types from \"./types\";\n\nimport { AuthActionTypes, AUTH } from \"./model\";\nimport { initialStore } from \"../initial-store\";\n\nexport const authReducer = (state = initialStore.auth, action: AuthActionTypes): AUTH => {\n\tswitch (action.type) {\n\t\tcase types.SIGN_IN: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.SIGN_IN_SUCCESS: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.SIGN_IN_FAIL: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.SIGN_UP: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.SIGN_UP_SUCCESS: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.SIGN_UP_FAIL: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.LOG_OUT: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.LOG_OUT_SUCCESS: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.LOG_OUT_FAIL: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.RESTORE_PASSWORD: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.RESTORE_PASSWORD_SUCCESS: {\n\t\t\treturn { ...state };\n\t\t}\n\t\tcase types.RESTORE_PASSWORD_FAIL: {\n\t\t\treturn { ...state };\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n",
  "store_auth_model": "import { Action } from \"redux\";\nimport * as actions from \"./actions\";\n\n// general for redux\ntype inferValueType<T> = T extends { [key: string]: infer U } ? U : never;\nconst iL = <U, T extends U>(arg: T): T => arg;\nexport const inferLiteral = <T extends string>(arg: T): T => iL(arg);\nexport type AuthActionTypes = ReturnType<inferValueType<typeof actions>>;\n\nexport type SignInPayload = {};\nexport type SignInSuccessPayload = {};\nexport type SignInFailPayload = {};\nexport type SignInType = (payload: SignInPayload) => AuthActionTypes;\n\nexport interface SignInSagas extends Action {\n\tpayload: SignInPayload;\n}\n\nexport type SignUpPayload = {};\nexport type SignUpSuccessPayload = {};\nexport type SignUpFailPayload = {};\nexport type SignUpType = (payload: SignUpPayload) => AuthActionTypes;\n\nexport interface SignUpSagas extends Action {\n\tpayload: SignUpPayload;\n}\n\nexport type LogOutPayload = {};\nexport type LogOutSuccessPayload = {};\nexport type LogOutFailPayload = {};\nexport type LogOutType = (payload: LogOutPayload) => AuthActionTypes;\n\nexport interface LogOutSagas extends Action {\n\tpayload: LogOutPayload;\n}\n\nexport type RestorePasswordPayload = {};\nexport type RestorePasswordSuccessPayload = {};\nexport type RestorePasswordFailPayload = {};\nexport type RestorePasswordType = (payload: RestorePasswordPayload) => AuthActionTypes;\n\nexport interface RestorePasswordSagas extends Action {\n\tpayload: RestorePasswordPayload;\n}\n\n// main type\nexport type AUTH = {};\n",
  "store_auth_actions": "import * as types from \"./types\";\nimport * as model from \"./model\";\nimport { inferLiteral } from \"./model\";\n<% const arr = [\n        { type: 'SIGN_IN', func: 'signIn', payload: 'SignInPayload' },\n        { type: 'SIGN_IN_SUCCESS', func: 'signInSuccess', payload: 'SignInSuccessPayload' },\n        { type: 'SIGN_IN_FAIL', func: 'signInFail', payload: 'SignInFailPayload' },\n\t\t\t\t{ type: 'SIGN_UP', func: 'signUp', payload: 'SignUpPayload' },\n        { type: 'SIGN_UP_SUCCESS', func: 'signUpSuccess', payload: 'SignUpSuccessPayload' },\n        { type: 'SIGN_UP_FAIL', func: 'signUpFail', payload: 'SignUpFailPayload' },\n\t\t\t\t{ type: 'LOG_OUT', func: 'logOut', payload: 'LogOutPayload' },\n        { type: 'LOG_OUT_SUCCESS', func: 'logOutSuccess', payload: 'LogOutSuccessPayload' },\n        { type: 'LOG_OUT_FAIL', func: 'logOutFail', payload: 'LogOutFailPayload' },\n\t\t\t\t{ type: 'RESTORE_PASSWORD', func: 'restorePassword', payload: 'RestorePasswordPayload' },\n        { type: 'RESTORE_PASSWORD_SUCCESS', func: 'restorePasswordSuccess', payload: 'RestorePasswordSuccessPayload' },\n        { type: 'RESTORE_PASSWORD_FAIL', func: 'restorePasswordFail', payload: 'RestorePasswordFailPayload' },\n    ] \n%>\n\n<%  for (let item of arr){ %>\nexport const <%-item.func%> = (payload: model.<%-item.payload%>) => ({\n\ttype: inferLiteral(types.<%-item.type%>),\n\tpayload\n} as const);\n<% } %>"
}
